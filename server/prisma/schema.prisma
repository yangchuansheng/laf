// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// These models cover multiple aspects, such as subscriptions, accounts, applications, 
// storage, databases, cloud functions, gateways, and SMS verification codes. 
// Here's a brief description:
//
// 1. Subscription models (Subscription and SubscriptionRenewal): Represent the state 
//    and plans of subscriptions and their renewals.
// 2. Account models (Account and AccountChargeOrder): Track account balances and 
//    recharge records.
// 3. Application models (Application and ApplicationConfiguration): Represent 
//    application configurations and states.
// 4. Storage models (StorageUser and StorageBucket): Represent the state and policies 
//    of storage users and buckets.
// 5. Database models (Database, DatabasePolicy, and DatabasePolicyRule): Represent the 
//    state, policies, and rules of databases.
// 6. Cloud Function models (CloudFunction and CronTrigger): Represent the configuration 
//    and state of cloud functions and scheduled triggers.
// 7. Gateway models (RuntimeDomain, BucketDomain, and WebsiteHosting): Represent the 
//    state and configuration of runtime domains, bucket domains, and website hosting.
// 8. Authentication provider models (AuthProvider): Represent the configuration and state 
//    of authentication providers.
// 9. SMS verification code models (SmsVerifyCode): Represent the type, state, and 
//    related information of SMS verification codes.
//
// These models together form a complete cloud service system, covering subscription 
// management, account management, application deployment, storage management, database 
// management, cloud function deployment and execution, gateway configuration, and SMS 
// verification, among other functionalities.

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum NoteLevel {
  Info
  Warning
  Danger
  Error
}

type Note {
  title   String?
  content String?
  link    String?
  lang    String?
  level   NoteLevel @default(Info)
}

// user schemas

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile              UserProfile?
  personalAccessTokens PersonalAccessToken[]
}

model UserPassword {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @db.ObjectId
  password  String
  state     String   @default("Active") // Active, Inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @unique @db.ObjectId
  openid    String?
  from      String?
  openData  Json?
  avatar    String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [uid], references: [id])
}

model PersonalAccessToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @db.ObjectId
  name      String
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [uid], references: [id])
}

// region schemas

type RegionClusterConf {
  driver     String // kubernetes
  kubeconfig String?
}

type RegionDatabaseConf {
  driver               String // mongodb
  connectionUri        String
  controlConnectionUri String
}

type RegionGatewayConf {
  driver        String // apisix
  runtimeDomain String // runtime domain (cloud function)
  websiteDomain String // website domain
  port          Int    @default(80)
  apiUrl        String
  apiKey        String
}

type RegionStorageConf {
  driver           String // minio
  domain           String
  externalEndpoint String
  internalEndpoint String
  accessKey        String
  secretKey        String
  controlEndpoint  String
}

model Region {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String             @unique
  displayName  String
  clusterConf  RegionClusterConf
  databaseConf RegionDatabaseConf
  gatewayConf  RegionGatewayConf
  storageConf  RegionStorageConf
  tls          Boolean            @default(false)
  state        String             @default("Active") // Active, Inactive

  notes Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications Application[]
  bundles      Bundle[]
}

type BundleResource {
  limitCPU      Int // 1000 = 1 core
  limitMemory   Int // in MB
  requestCPU    Int // 1000 = 1 core
  requestMemory Int // in MB

  databaseCapacity       Int // in MB
  storageCapacity        Int // in MB
  networkTrafficOutbound Int // in MB

  limitCountOfCloudFunction  Int // limit count of cloud function per application
  limitCountOfBucket         Int // limit count of bucket per application
  limitCountOfDatabasePolicy Int // limit count of database policy per application
  limitCountOfTrigger        Int // limit count of trigger per application
  limitCountOfWebsiteHosting Int // limit count of website hosting per application
  reservedTimeAfterExpired   Int // in seconds

  limitDatabaseTPS Int // limit count of database TPS per application
  limitStorageTPS  Int // limit count of storage TPS per application
}

type BundleSubscriptionOption {
  name         String
  displayName  String
  duration     Int // in seconds
  price        Int
  specialPrice Int
}

model Bundle {
  id                  String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  displayName         String
  regionId            String                     @db.ObjectId
  priority            Int                        @default(0)
  state               String                     @default("Active") // Active, Inactive
  limitCountPerUser   Int // limit count of application per user could create
  subscriptionOptions BundleSubscriptionOption[]
  maxRenewalTime      Int // in seconds

  resource BundleResource
  notes    Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  region Region @relation(fields: [regionId], references: [id])

  @@unique([regionId, name])
}

model ApplicationBundle {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  appid       String         @unique
  bundleId    String         @db.ObjectId
  name        String
  displayName String
  resource    BundleResource

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

type RuntimeImageGroup {
  main    String
  init    String?
  sidecar String?
}

model Runtime {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String            @unique
  type        String
  image       RuntimeImageGroup
  state       String            @default("Active") // Active, Inactive
  version     String
  latest      Boolean
  Application Application[]
}

// subscriptions schemas

// Subscription section mainly consists of two models: Subscription and SubscriptionRenewal.
//
// 1. Subscription: Represents the state, phase, and renewal plan of a subscription. It includes
// the created, updated, and deleted states (SubscriptionState enum); the pending, valid, expired,
// expired and stopped, and deleted phases (SubscriptionPhase enum); and manual, monthly, or
// yearly renewal plans (SubscriptionRenewalPlan enum). This model also contains the associated
// application (Application).
//
// 2. SubscriptionRenewal: Represents the state, duration, and amount of a subscription renewal.
// It includes the pending, paid, and failed renewal phases (SubscriptionRenewalPhase enum).

enum SubscriptionState {
  Created
  Deleted
}

enum SubscriptionPhase {
  Pending
  Valid
  Expired
  ExpiredAndStopped
  Deleted
}

enum SubscriptionRenewalPlan {
  Manual
  Monthly
  Yearly
}

type SubscriptionApplicationCreateInput {
  name      String
  state     String
  runtimeId String
  regionId  String
}

model Subscription {
  id          String                             @id @default(auto()) @map("_id") @db.ObjectId
  input       SubscriptionApplicationCreateInput
  bundleId    String                             @db.ObjectId
  appid       String                             @unique
  state       SubscriptionState                  @default(Created)
  phase       SubscriptionPhase                  @default(Pending)
  renewalPlan SubscriptionRenewalPlan            @default(Manual)
  expiredAt   DateTime
  lockedAt    DateTime
  createdAt   DateTime                           @default(now())
  updatedAt   DateTime                           @updatedAt
  createdBy   String                             @db.ObjectId

  application Application?
}

enum SubscriptionRenewalPhase {
  Pending
  Paid
  Failed
}

model SubscriptionRenewal {
  id             String                   @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String                   @db.ObjectId
  duration       Int // in seconds
  amount         Int
  phase          SubscriptionRenewalPhase @default(Pending)
  message        String?
  lockedAt       DateTime
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  createdBy      String                   @db.ObjectId
}

// desired state of resource
enum SubscriptionUpgradePhase {
  Pending
  Completed
  Failed
}

model SubscriptionUpgrade {
  id               String                   @id @default(auto()) @map("_id") @db.ObjectId
  appid            String
  subscriptionId   String
  originalBundleId String                   @db.ObjectId
  targetBundleId   String                   @db.ObjectId
  phase            SubscriptionUpgradePhase @default(Pending)
  restart          Boolean                  @default(false)
  message          String?
  lockedAt         DateTime
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
}

// accounts schemas

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  balance   Int      @default(0)
  state     String   @default("Active") // Active, Inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @unique @db.ObjectId
}

model AccountTransaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String   @db.ObjectId
  amount    Int
  balance   Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccountChargePhase {
  Pending
  Paid
  Failed
}

enum Currency {
  CNY
  USD
}

model AccountChargeOrder {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  accountId String             @db.ObjectId
  amount    Int
  currency  Currency
  phase     AccountChargePhase @default(Pending)
  channel   PaymentChannelType
  result    Json?
  message   String?
  createdAt DateTime           @default(now())
  lockedAt  DateTime
  updatedAt DateTime           @updatedAt
  createdBy String             @db.ObjectId
}

enum PaymentChannelType {
  Manual
  Alipay
  WeChat
  Stripe
  Paypal
  Google
}

model PaymentChannel {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  type      PaymentChannelType
  name      String
  spec      Json
  state     String             @default("Active") // Active, Inactive
  notes     Note[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

// application schemas

// desired state of application
enum ApplicationState {
  Running
  Stopped
  Restarting
  Deleted
}

// actual state of application
enum ApplicationPhase {
  Creating // app resources creating
  Created // app resources created
  Starting // instance starting
  Started // instance started (Running, Ready)
  Stopping // instance stopping
  Stopped // instance stopped
  Deleting // app resources deleting
  Deleted // app resources deleted
}

model Application {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  appid     String           @unique
  regionId  String           @db.ObjectId
  runtimeId String           @db.ObjectId
  tags      String[]
  state     ApplicationState @default(Running)
  phase     ApplicationPhase @default(Creating)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  lockedAt  DateTime
  createdBy String           @db.ObjectId

  region  Region  @relation(fields: [regionId], references: [id])
  runtime Runtime @relation(fields: [runtimeId], references: [id])

  configuration ApplicationConfiguration?
  storageUser   StorageUser?
  database      Database?
  domain        RuntimeDomain?
  bundle        ApplicationBundle?
  subscription  Subscription              @relation(fields: [appid], references: [appid])
}

type EnvironmentVariable {
  name  String
  value String
}

model ApplicationConfiguration {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  appid        String                @unique
  environments EnvironmentVariable[]
  dependencies String[]              @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

// storage schemas

enum StorageState {
  Active
  Inactive
  Deleted
}

enum StoragePhase {
  Creating
  Created
  Deleting
  Deleted
}

model StorageUser {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  appid     String       @unique
  accessKey String
  secretKey String
  state     StorageState @default(Active)
  phase     StoragePhase @default(Creating)
  lockedAt  DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

enum BucketPolicy {
  readwrite
  readonly
  private
}

model StorageBucket {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  name      String       @unique
  shortName String
  policy    BucketPolicy
  state     StorageState @default(Active)
  phase     StoragePhase @default(Creating)
  lockedAt  DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  domain         BucketDomain?
  websiteHosting WebsiteHosting?
}

// database schemas

enum DatabaseState {
  Active
  Inactive
  Deleted
}

enum DatabasePhase {
  Creating
  Created
  Deleting
  Deleted
}

model Database {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  appid     String        @unique
  name      String
  user      String
  password  String
  state     DatabaseState @default(Active)
  phase     DatabasePhase @default(Creating)
  lockedAt  DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

model DatabasePolicy {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  name      String
  injector  String?
  rules     DatabasePolicyRule[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@unique([appid, name])
}

model DatabasePolicyRule {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  appid          String
  policyName     String
  collectionName String
  value          Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  policy DatabasePolicy @relation(fields: [appid, policyName], references: [appid, name], onDelete: Cascade)

  @@unique([appid, policyName, collectionName])
}

// cloud function schemas

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
}

type CloudFunctionSource {
  code     String
  compiled String?
  uri      String?
  version  Int     @default(0)
  hash     String?
  lang     String?
}

model CloudFunction {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  name      String
  source    CloudFunctionSource
  desc      String
  tags      String[]
  methods   HttpMethod[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  createdBy String              @db.ObjectId

  cronTriggers CronTrigger[]

  @@unique([appid, name])
}

// diresired state of resource
enum TriggerState {
  Active
  Inactive
  Deleted
}

// actual state of resource
enum TriggerPhase {
  Creating
  Created
  Deleting
  Deleted
}

model CronTrigger {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  desc      String
  cron      String
  target    String
  state     TriggerState @default(Active)
  phase     TriggerPhase @default(Creating)
  lockedAt  DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  cloudFunction CloudFunction @relation(fields: [appid, target], references: [appid, name])
}

// gateway schemas

// diresired state of resource
enum DomainState {
  Active
  Inactive
  Deleted
}

// actual state of resource
enum DomainPhase {
  Creating
  Created
  Deleting
  Deleted
}

model RuntimeDomain {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  appid     String      @unique
  domain    String      @unique
  state     DomainState @default(Active)
  phase     DomainPhase @default(Creating)
  lockedAt  DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

model BucketDomain {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  appid      String
  bucketName String      @unique
  domain     String      @unique
  state      DomainState @default(Active)
  phase      DomainPhase @default(Creating)
  lockedAt   DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  bucket StorageBucket @relation(fields: [bucketName], references: [name])
}

model WebsiteHosting {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  appid      String
  bucketName String      @unique
  domain     String      @unique // auto-generated domain by default, custom domain if set
  isCustom   Boolean     @default(false) // if true, domain is custom domain
  state      DomainState @default(Active)
  phase      DomainPhase @default(Creating)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  lockedAt   DateTime

  bucket StorageBucket @relation(fields: [bucketName], references: [name])
}

enum AuthProviderState {
  Enabled
  Disabled
}

model AuthProvider {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String            @unique
  bind      Json
  register  Boolean
  default   Boolean
  state     AuthProviderState
  config    Json
  notes     Note[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

// Sms schemas
enum SmsVerifyCodeType {
  Signin
  Signup
  ResetPassword
  Bind
  Unbind
  ChangePhone
}

model SmsVerifyCode {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  phone     String
  code      String
  ip        String
  type      SmsVerifyCodeType
  state     Int               @default(0) // 0: created, 1: used
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}
